package org.finance.bank.Servlet;

import java.io.IOException;
import java.io.PrintWriter;
import java.math.BigDecimal;
import java.util.Date;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.finance.bank.bean.TDetalleCaja;
import org.finance.bank.bean.TMoneda;
import org.finance.bank.bean.TOperacion;
import org.finance.bank.bean.TPersonaCaja;
import org.finance.bank.bean.TRegistroOtros;
import org.finance.bank.bean.TTipoOperacion;
import org.finance.bank.model.dao.DAOGeneral;
import org.finance.bank.model.iniDetalleCaja;
import org.finance.bank.util.DateUtil;
import org.finance.bank.util.numeroOperacion;

/**
 *
 * @author ronald
 */
public class SRetiroOtro extends HttpServlet {

    /** 
     * Processes requests for both HTTP <code>GET</code> and <code>POST</code> methods.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();
        HttpSession session = request.getSession(true);
        DAOGeneral dao = new DAOGeneral();
        String myIdPc = (String) session.getAttribute("USER_ID_PERSONA_CAJA");
        String idForInitNewestTable = DateUtil.convertDateId(myIdPc,SRetiroOtro.class.getSimpleName());
        String myFi = session.getAttribute("USER_CODFILIAL").toString();
        String myCaja = session.getAttribute("USER_CODCAJA").toString();
        String myId = session.getAttribute("USER_ID").toString();
        String myIp = session.getAttribute("USER_IP").toString();
        try {
            String importe = "0";
            if (request.getParameter("importe") != null || !request.getParameter("importe").equals("")) {
                importe = request.getParameter("importe").toString();
            }
            String cod_moneda = "";
            if (request.getParameter("cod_moneda") != null || !request.getParameter("cod_moneda").equals("")) {
                cod_moneda = request.getParameter("cod_moneda").toString();
            }
            String lugar_ret = "";
            if (request.getParameter("lugar_ret") != null || !request.getParameter("lugar_ret").equals("")) {
                lugar_ret = request.getParameter("lugar_ret").toString();
            }
            if (importe.equals("0")) {
                return;
            }
            TMoneda monedaObj = (TMoneda) dao.load(TMoneda.class, cod_moneda);
            TDetalleCaja detallecaja = (TDetalleCaja) dao.load(TDetalleCaja.class,DateUtil.getDate(new Date()).replaceAll("/", "") + myCaja + monedaObj.getCodParaNumCuenta() + "00");
            detallecaja.setMontoFinal(detallecaja.getMontoFinal().subtract(new BigDecimal(importe)));
            detallecaja.setMontoEntregado(detallecaja.getMontoEntregado().add(new BigDecimal(importe)));
            detallecaja.setDateUser(DateUtil.getNOW_S());
            dao.update();
            TPersonaCaja pcaja = (TPersonaCaja) dao.load(TPersonaCaja.class, myIdPc);
            TOperacion operacion = new TOperacion();
            operacion.setIdOperacion(idForInitNewestTable);
            operacion.setDescripcion("* RETIRO OTRO " + DateUtil.getNOW_S());
            operacion.setFecha(DateUtil.getNOW_S());
            operacion.setSaldofinal(detallecaja.getMontoFinal());
            TTipoOperacion tipoOper = (TTipoOperacion) dao.load(TTipoOperacion.class, "TIPC10");
            operacion.setTTipoOperacion(tipoOper);
            operacion.setEstado("ACTIVO");
            operacion.setNumeroOperacion(numeroOperacion.getNumber(myFi, myCaja));
            operacion.setTMoneda(monedaObj);
            operacion.setIdUser(myId + " 10");
            operacion.setIpUser(myIp.toString());
            operacion.setDateUser(DateUtil.getNOW_S());
            operacion.setTPersonaCaja(pcaja);
            operacion.setFd(new Date());
            dao.persist(operacion);
            TRegistroOtros ro = new TRegistroOtros();
            ro.setIdregistrootros(idForInitNewestTable);
            ro.setMonto(new BigDecimal(importe));
            ro.setDescripcion(lugar_ret);
            ro.setTOperacion(operacion);
            ro.setTPersonaCaja(pcaja);
            ro.setDateUser(DateUtil.getNOW_S());
            ro.setIdUser(myId + " 10");
            ro.setIpUser(myIp);
            ro.setEstado("ACTIVO");
            dao.persist(ro);
        } finally {
            out.close();
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /** 
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /** 
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /** 
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>
}
