package org.finance.bank.Servlet;

import java.io.IOException;
import java.io.PrintWriter;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.finance.bank.bean.TCaja;
import org.finance.bank.bean.TCategoriaPersona;
import org.finance.bank.bean.TDistrito;
import org.finance.bank.bean.TFilial;
import org.finance.bank.bean.TPersona;
import org.finance.bank.model.dao.DAOGeneral;
import org.finance.bank.util.DateUtil;
import org.finance.bank.util.HibernateUtil;

/**
 *
 * @author ZAMORA
 */
public class SIngresarCatalogo extends HttpServlet {

    protected void processRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        response.setContentType("text/html;charset=UTF-8");
        PrintWriter out = response.getWriter();
        HttpSession session = request.getSession(true);
        DAOGeneral dao = new DAOGeneral();
        String myId = (String) session.getAttribute("USER_ID");
        String idForInitNewestTable = DateUtil.convertDateId(myId, SIngresarCatalogo.class.getSimpleName());
        String myIp = (String) session.getAttribute("USER_IP");
        try {
            String catalogo = request.getParameter("txtcatalogo");
            if (catalogo.equals("FILIAL")) {
                String codigo = nuevoCodigoFilial();
                String nombre = request.getParameter("txtNombre");
                if (nombre == null) {
                    nombre = "FILIAL" + codigo;
                }
                String direccion = request.getParameter("txtDireccion");
                if (direccion == null) {
                    direccion = "N/A";
                }
                String estado = request.getParameter("selEstado");
                if (estado == null) {
                    estado = "INACTIVO";
                }
                String telefono = request.getParameter("txtTelefono");
                if (telefono == null) {
                    telefono = "S/n";
                }
                String distrito = request.getParameter("seldistrito");
                if (distrito == null) {
                    distrito = "";
                }
                String CodParaNumCuenta = codigo.substring(codigo.length() - 3);
                nombre = nombre.toUpperCase();
                direccion = direccion.toUpperCase();
                TFilial filial = new TFilial();
                filial.setCodFilial(codigo);
                filial.setNombre(nombre);
                filial.setDireccion(direccion);
                filial.setEstado(estado);
                filial.setTelefono(telefono);
                filial.setIdUser(myId);
                filial.setIpUser(myIp);
                filial.setDateUser(DateUtil.getNOW_S());
                TDistrito dist = (TDistrito) dao.load(TDistrito.class, distrito);
                filial.setTDistrito(dist);
                filial.setCodParaNumCuenta(CodParaNumCuenta);
                dao.persist(filial);
                out.println("<input type='text' id='txtRptaInsertar' name='txtRptaInsertar' value='SI'>");
                out.println("<input type='text' id='txtExisteCat' name='txtExisteCat' value='NO'>");
            } else if (catalogo.equals("CAJA")) {
                String codfilial = request.getParameter("selfilial");
                if (codfilial == null) {
                    codfilial = "0501";
                }
                String codigo = nuevoCodigoCaja(codfilial);
                String nombre = request.getParameter("txtNombre");
                if (nombre == null) {
                    nombre = "CAJA" + codigo;
                }
                String tipo = request.getParameter("selTipo");
                if (tipo == null) {
                    tipo = "SECONDARY";
                }
                String estado = request.getParameter("selEstado");
                if (estado == null) {
                    estado = "INACTIVO";
                }
                codigo = codigo.toUpperCase();
                nombre = nombre.toUpperCase();
                TCaja caja = new TCaja();
                caja.setCodCaja(codigo);
                caja.setNombreCaja(nombre);
                caja.setTipo(tipo);
                caja.setEstado(estado);
                caja.setIdUser(myId);
                caja.setIpUser(myIp);
                caja.setDateUser(DateUtil.getNOW_S());
                TFilial filial = (TFilial) dao.load(TFilial.class, codfilial);
                caja.setTFilial(filial);
                dao.persist(caja);
                out.println("<input type='text' id='txtRptaInsertar' name='txtRptaInsertar' value='SI'>");
                out.println("<input type='text' id='txtExisteCat' name='txtExisteCat' value='NO'>");
            } else if (catalogo.equals("MONEDA")) {
                return;
                /*String codigo = request.getParameter("txtCodigo");
                String nombre = request.getParameter("txtNombre");
                String codPaNumCuen = request.getParameter("txtCodPaNumCuen");
                String simbolo = request.getParameter("txtSimbolo");
                String color = request.getParameter("txtColor");
                Transaction tr = sess.beginTransaction();
                Query query = sess.createQuery("from TMoneda");
                List result = query.list();
                Iterator it = result.iterator();
                String existe = "NO";
                while (it.hasNext()) {
                TMoneda mon = (TMoneda) it.next();
                if (mon.getCodMoneda().equals(codigo)) {
                existe = "SI";
                }
                }
                if (existe.equals("NO")) {
                tr = sess.beginTransaction();
                TMoneda moneda = new TMoneda();
                moneda.setCodMoneda(codigo);
                moneda.setNombre(nombre);
                moneda.setSimbolo(simbolo);
                moneda.setColor(color);
                moneda.setCodParaNumCuenta(codPaNumCuen);
                moneda.setIdUser(id_user);
                moneda.setIpUser(ip_user);
                DateFormat df = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
                moneda.setDateUser(df.format(new Date()));
                sess.persist(moneda);
                tr.commit();
                out.println("<input type='text' id='txtRptaInsertar' name='txtRptaInsertar' value='SI'>");
                out.println("<input type='text' id='txtExisteCat' name='txtExisteCat' value='NO'>");
                sess.close();
                sessFact.close();
                } else {
                out.println("<input type='text' id='txtExisteCat' name='txtExisteCat' value='SI'>");
                }*/
            } else if (catalogo.equals("PERSONA")) {
                String DNI = request.getParameter("txtDNI");
                if (DNI == null) {
                    DNI = "--";
                }
                String RUC = request.getParameter("txtRUC");
                if (RUC == null) {
                    RUC = "--";
                }
                String nombre = request.getParameter("txtNombre");
                if (nombre == null) {
                    nombre = "N/A";
                }
                String apellidos = request.getParameter("txtApellidos");
                if (apellidos == null) {
                    apellidos = "--";
                }
                String email = request.getParameter("txtEmail");
                if (email == null) {
                    email = "--";
                }
                String ubigeo = request.getParameter("txtUbigeo");
                if (ubigeo == null) {
                    ubigeo = "--";
                }
                String telefono = request.getParameter("txtTelefono");
                if (telefono == null) {
                    telefono = "--";
                }
                String celular = request.getParameter("txtCelular");
                if (celular == null) {
                    celular = "--";
                }
                String urlfoto = request.getParameter("txtUrlFoto");
                if (urlfoto == null) {
                    urlfoto = "&nbsp;";
                }
                String urlfirma = request.getParameter("txtUrlFirma");
                if (urlfirma == null) {
                    urlfirma = "&nbsp;";
                }
                String direccion = request.getParameter("txtDireccion");
                if (direccion == null) {
                    direccion = "--";
                }
                String estado = request.getParameter("selEstado");
                if (estado == null) {
                    estado = "ACTIVO";
                }
                String categoria = request.getParameter("selCategPersona");
                if (categoria == null) {
                    categoria = "NATURAL";
                }
                nombre = nombre.toUpperCase();
                apellidos = apellidos.toUpperCase();
                email = email.toLowerCase();
                direccion = direccion.toUpperCase();
                TPersona persona = new TPersona();
                persona.setIdUserPk(idForInitNewestTable);
                persona.setDocIdentidad(DNI);
                persona.setRuc(RUC);
                persona.setNombre(nombre);
                persona.setApellidos(apellidos);
                persona.setEmail(email);
                persona.setUbigeo(ubigeo);
                persona.setTelefono(telefono);
                persona.setCelular(celular);
                persona.setDireccion(direccion);
                persona.setUrlFoto(urlfoto);
                persona.setUrlFirma(urlfirma);
                persona.setEstado(estado);
                TCategoriaPersona catper = (TCategoriaPersona) dao.load(TCategoriaPersona.class, categoria);
                persona.setTCategoriaPersona(catper);
                persona.setIdUser(myId);
                persona.setIpUser(myIp);
                persona.setDateUser(DateUtil.getNOW_S());
                dao.persist(persona);
                out.println("<input type='text' id='txtRptaInsertar' name='txtRptaInsertar' value='SI'>");
                out.println("<input type='text' id='txtExisteCat' name='txtExisteCat' value='NO'>");
            }
        } finally {
            out.close();
        }
    }

    // <editor-fold defaultstate="collapsed" desc="HttpServlet methods. Click on the + sign on the left to edit the code.">
    /**
     * Handles the HTTP <code>GET</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Handles the HTTP <code>POST</code> method.
     * @param request servlet request
     * @param response servlet response
     * @throws ServletException if a servlet-specific error occurs
     * @throws IOException if an I/O error occurs
     */
    @Override
    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        processRequest(request, response);
    }

    /**
     * Returns a short description of the servlet.
     * @return a String containing servlet description
     */
    @Override
    public String getServletInfo() {
        return "Short description";
    }// </editor-fold>

    private String nuevoCodigoFilial() {
        DAOGeneral d = new DAOGeneral();
        int bv = d.findAll("from TFilial").size();
        bv++;
        bv += 500;
        String s = String.valueOf(bv);
        if (s.length() < 4) {
            s = "0" + s;
        }
        return s;
    }

    private String nuevoCodigoCaja(String codFilial) {
        DAOGeneral d = new DAOGeneral();
        int h = d.findAll("from TCaja ca where ca.TFilial='" + codFilial + "'").size();
        h++;
        String s = String.valueOf(h);
        if (s.length() < 4) {
            s = "000".substring(s.length()) + s;
        }
        return codFilial + "CA" + s;
    }
}
